<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Doran]]></title>
  <link href="http://kevindoran.github.io/atom.xml" rel="self"/>
  <link href="http://kevindoran.github.io/"/>
  <updated>2015-04-05T15:23:24+12:00</updated>
  <id>http://kevindoran.github.io/</id>
  <author>
    <name><![CDATA[Kevin Doran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[6 Things to Know Before You Enter an Accelerator]]></title>
    <link href="http://kevindoran.github.io/6-things-to-know-before-you-enter-an-accelerator/"/>
    <updated>2014-06-11T21:58:28+12:00</updated>
    <id>http://kevindoran.github.io/6-things-to-know-before-you-enter-an-accelerator</id>
    <content type="html"><![CDATA[<p>I took part in New Zealand’s startup accelerator, Lighting
Lab, an accelerator modelled on Techstars. Here are six things I learnt.  I
tried to cover topics which are not frequently covered elsewhere.  </p>

<!-- more -->

<h2>Beware of people who state their opinion as fact</h2>

<p>Our team interacted with 30-40 mentors though the program.
The help and advice was invaluable in guiding our business and broadening our perspective.
However, it is difficult to unify or distil many opinions or suggestions when
so many contradict. When considering someone’s advice, one rule which helped us
was to be wary of anyone who stated their opinion as fact. People who convey
their opinion as absolute often do not consider multiple perspectives, or they may
be applying logic which worked for them without acknowledging the unique
factors and risks associated with your situation. </p>

<h2>It is not usually a quick journey</h2>

<p>There are many stories in the media of businesses which
skyrocket to success. During the accelerator program, I was exposed to the
stories of such a large number businesses that my perception of the typical
startup journey changed significantly. I now know that the large majority of
startups are not overnight successes. Instead, I expect a startup to take-up
5-7 years of my life before I will see a return. This revelation can cause a
massive shift in an entrepreneur’s perspective. A runner who enjoys sprints may
suddenly find himself in a marathon. While this shift in perspective has not
caused my entrepreneurial spirit to waver, it has caused me to re-evaluate
other aspects of my life and has changed how I will approach the next few years
ahead. </p>

<h2>It is not often clear when to end a business</h2>
<p>In some ways, a team is lucky if it experiences a sudden event which 
undermines their business causing them to end the startup. Many teams continue 
in a state of limbo; there are no clear signs of imminent failure, and no clear 
signs of definite success. It can be difficult to know if the next 3-6 months will 
see the business grow or die. Is the current down period the beginning of the 
end, or just a lull? If a startup is in this situation, the founders are 
probably debating whether to continue or not. </p>

<img id='startupChart.png' class='img-responsive' src="http://kevindoran.github.io/images/startupChart.png" alt='The Ups and Downs of Startup Founders' />

<p>
This decision is muddled by the ups and downs of the team members themselves and
 the attractiveness of what they could otherwise be doing with their lives. When
 the team is tired and worn out, it is easy to have an overly pessimistic view 
of the business, and conversely there can be an overly positive view when the 
team is buzzing with excitement. When analysing the health of the business, a 
team should separate the business’s ups and downs from the ups and downs of the 
team. In addition, do not wait for a clear signal before moving on to another idea. 
Conversely, don’t jump ship when you hit a bump. Somehow, you have to manage 
these two conflicting pressures. 
</p>
<h2>The importance of a big idea</h2>

<p>At first, I was annoyed with advisors and investors who
would frown on our initial business; it had a reasonably small market size and
wasn’t going to be a 100 million dollar business. It was not going to be big,
but it had a high chance of being <em>something</em>. As a 23 year old just out
of university, I would much prefer to have a 50% chance of 2 million rather
than 10% chance of 200 million. Why would people scoff at a ‘lifestyle business’
when a good lifestyle is most people’s dream?</p>

<p>I have come to see the importance of a big idea. A small business
is not a lesser business, it is just not a very investable business. Some <a
href="http://fundersandfounders.com/how-funding-works-splitting-equity/">simple
math can uncover the reasoning.</a> If a business begins with two or three
founders, receives two rounds of funding and allocates shares for early
employees, very quickly each founder may find themselves with ~15% equity. If
the founders spend 5 years working on the business and it exits for $2 million,
300K suddenly does not seem like a huge reward for five years of hard work with
a high risk of failure. Investors would get a similarly small return; hence,
they rarely invest in businesses with small potential even if they are likely
to succeed. If you are lucky enough to be able to bootstrap a lifestyle
business, ignore the disdain. However, if your business is going to need
investment, it needs to have big dreams. </p>

<h2>A balanced lifestyle beats long hours</h2>

<p>There is a common opinion that accelerators are typically 3
months long as 3 months is the right amount of time to validate, build and present
a business. I think 3 months is
suspiciously close to the maximum length of time the average entrepreneur
can work at full throttle before burning out. Like many others, I worked intensely
with long hours throughout the program. The business became the focus of my
day, every day. Family, friends, exercise and relaxation were a secondary
concern. Some people in the program had more balanced approaches to work. They
may not have made as much progress at the start of the lab, but by the end of
the lab, they had more energy and more motivation remaining.  After ‘Demo Day’,
the people who had maintained a balanced work rhythm were more capable of
leaping into the next stage of their business. My advice for people entering an
accelerator is: prepare for a marathon, not a sprint. The end of the program is
still just the beginning of your business. Don’t exhaust yourself on the first
leg of the journey. </p>

<h2>Some people will be lucky to come out with a business; everyone has the
choice to come out with great friends and good networks</h2>

<p>It is too easy to have a laser focus on building your
business and neglect to socialise and connect with peers. For the shy or introverted,
it is also too easy to just hang out with your own team. Prioritise having fun
with your accelerator comrades. It will help you keep that work-life balance,
it will make your experience more memorable and meaningful and you will gain
friends and future work colleagues. In a few months your relationships and
networks may be more valuable to you than your business ever was. </p>

<h2>Was it worth it?</h2>

<p>I thoroughly enjoyed my experience in the Lightning Lab
accelerator. Our team came into Lightning Lab on the back of two years of
part-time work on our business and it progressed in the lab at a far greater
rate than it had anytime during the previous two years. We experienced many ups
and downs; I managed to balance my initial habit of over working; I learnt a
year’s worth of experience in three months and I gained some great friends. So,
if I encounter anyone considering applying to enter the Lightning Lab or a
similar accelerator, I will wholeheartedly encourage them to do so. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Java EE is the Charizard of Web Frameworks]]></title>
    <link href="http://kevindoran.github.io/how-java-ee-is-the-charizard-of-web-frameworks/"/>
    <updated>2014-06-07T20:59:52+12:00</updated>
    <id>http://kevindoran.github.io/how-java-ee-is-the-charizard-of-web-frameworks</id>
    <content type="html"><![CDATA[<p>
    When using Java EE to create web applications it can be a powerful but difficult to tame platform, much like the Pokémon character, Charizard. <span class="note">Note: Java EE is much more than a web framework, but this discussion focuses on using it to create web applications.</span> 
</p>

<p>
For those of you who are not familiar with or do not remember the original Pokémon series, here is a brief recount of Charizard’s story:
</p>
<!-- more -->
<blockquote>
    <a href="http://bulbapedia.bulbagarden.net/wiki/Charizard_%28Pok%C3%A9mon%29" target="_blank">Charizard</a> was one of the mightiest and most powerful Pokémon of the original 150 Pokémon. The Charizard belonging to the main protagonist, Ash, is infamously disobedient and disloyal. He would blatantly refuse to listen to Ash, going off on his own agenda which often involved attempting to burn various places to the ground. However, despite its rebellious streak, Charizard had moments of camaraderie, and in bursts of flaming might he would often save the day and the lives of his companions (sometimes by accident). Ash knew that if he could tame the mighty Charizard he would become an almost unstoppable Pokémon master.
</blockquote>
<p>
<a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition">Java EE</a> is the Charizard of Web Development Frameworks. If you can tame it, you can become a master web application developer. But if you don’t, you may find yourself bringing about fiery havoc to a web development project.
</p>

<h2>Untameable Java EE</h2>
<p>
There are 6 ways I list here in which I have had difficulty with Java EE. Firstly, I would like to correct my own post title, as <em>it is not entirely correct to call Java EE a web development framework</em>. It is so much more than that. However, this brings us nicely to the first aspect of Java EE which bewildered me as a newcomer: what exactly is Java EE?
</p>

<h3>1. What exactly is Java EE</h3>
<p>
When I visited Wikipedia, I found this description of Java EE:
</p>
<blockquote>
    Java Platform, Enterprise Edition or Java EE is Oracle&#8217;s <em>enterprise</em> Java <em>computing platform</em>. The platform provides an API and <em>runtime environment</em> for developing and running <em>enterprise software</em>, including network and web services, and other large-scale, <em>multi-tiered</em>, scalable, reliable, and secure network applications. Java EE extends the Java Platform, Standard Edition (Java SE), providing an API for <em>object-relational mapping</em>, <em>distributed</em> and <em>multi-tier architectures</em>, and web services. The platform incorporates a design based largely on <em>modular components</em> running on an <em>application server</em>. 
</blockquote>
<p>
This explanation of Java EE seems like a definition which you might re-read after mastering a topic and chuckle contently to oneself knowing that you recognise and appreciate each buzz-word. While each buzz-word may be simple to understand on its own, listing so many buzz-words together doesn&#8217;t paint a clear picture of Java EE. As a newcomer to Java EE, I found it very difficult to penetrate past the dense layer of jargon words which seemed ubiquitous. And it seems <a href="http://stackoverflow.com/questions/15774924/just-what-is-java-ee-really?lq=1">I wasn’t alone</a>.
</p>

<h3>2. 100 ways to do the same thing</h3>
<p>
With flexibility comes choice. When I began using Java EE, I struggled to decide how to tackle problems, even simple problems. When I am solving a problem, I feel comfortable creating a solution which I feel takes into account best practices and the success of other approaches to similar problems. However, I would find myself spending 90% of my time researching architectural decisions before beginning to tackle a task. This was due to the <em>overwhelming choice provided by the Java EE landscape</em>. Here are some of the sources of choice:
</p>
<ul>
    <li>There are many implementations of Java EE (this choice can be broken down as each layer of the Java EE stack, such as <a href="http://en.wikibooks.org/wiki/Java_Persistence">JPA</a> and <a href="http://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services">JX-RS</a> can have multiple implementations).
</li>
<li>
There are many application servers (such as <a href="https://glassfish.java.net/">Glassfish</a>, <a href="http://www.wildfly.org/">JBoss AS/WildFly</a>, <a href="http://www-01.ibm.com/software/websphere/">WebSphere</a>, Tomcat/<a href="http://tomee.apache.org/apache-tomee.html">TomEE</a>, <a href="http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html">WebLogic</a>)
</li>
<li>
Which layer of the stack to use: should I put the logic in <a href="http://en.wikipedia.org/wiki/JavaServer_Faces">JSF</a>’s managed beans, or <a href="http://en.wikipedia.org/wiki/Ejb">EJB</a>s, or plain java classes (or sometimes even in JSF/JSP files).
</li>
<li>
Which mentality should I have: as each Java EE version is released, new approaches to old problems are invented and become available alongside the old ones in the quiver of choices. The new approaches hold promises of increased productivity while the old approaches have reliable documentation, are not as affected by bugs and work alongside my existing code. It reality, a mix and match of new and old get used together.
</li>
<li>
Packaging options: should I have WARs and EJB JARs in an EAR, or just use a lightweight WAR?
</li>
</ul>
<p>
Java EE offers immense flexibility. It is both a blessing and a curse.
</p>

<h3>3. Development is slowed by deployment</h3>
<p>
    Unlike frameworks like the Java/Scala <a href="http://www.playframework.com/">Play Framework</a> or <a href="http://rubyonrails.org/">Ruby on Rails</a>, Java EE requires compilation and deployment before changes can be observed live. I worked on a reasonably large and modular project with many separate JARs, WARs and EARs. <em>Testing a few changes would require waiting about 20-30 seconds before seeing them live</em> (using reasonably powerful hardware). This delay was torturous when testing many minor tweaks. There are some tools to lessen this issue: <a href="http://zeroturnaround.com/software/jrebel/">JRebel</a> allows for instantaneous changes (if you can afford it), and Netbeans has some <a href="http://wiki.netbeans.org/CompileOnSave#Java_EE">features for live deployment</a>, but you are then tied to the IDE.  
</p>

<h3>4. PermGen error</h3>
<p>
    While not a universal problem, I was plagued by this error. When an application is redeployed multiple times, the application server I used, Glassfish, would steadily increase its memory usage. This is due to the classloaders of the previous deployments and their loaded classes <a href="http://stackoverflow.com/questions/7683434/permgen-space-error-glassfish-server">not being garbage collected fully</a>. The memory leak would result in Glassfish having a PermGen Error ever 6-8 redeploys, and would require a forced killing and restart. While this issue was annoying, it did become a <em>funny office joke: “you got PermGenned”</em>.
</p>

<h3>5. Cryptic stack traces</h3>
<p>
I feel like Glassfish uses my application’s exception traces as an excuse to carry out a lengthy secretive conversation with some elusive entity going by the name of Grizzy or Felix. At the start, end or somewhere in between, I’m sometimes lucky to have the reason for the exception tagged on. The error messages received are often very vague and can cover a broad range of possible root causes. Our developer team ended up keeping a map of exception messages to possible causes they might be alluding to.
</p>

<h3>6. Web designers are not familiar with JSF</h3>
<p>
Web designers are not familiar with JSF, one of the most popular Java EE view technologies. JSF is great for developers to quickly create nicely looking prototype web applications without having to:
</p>
<ul>
<li>
Worry about the details of creating a stateful application on-top of HTTP (which is stateless).
</li>
<li>
Worry about CSS (when using a component library, such as <a href="http://thoughtworks.fileburst.com/assets/technology-radar-jan-2014-en.pdf">Primefaces</a>).
</li>
</ul>
<p>
However, JSF does this by abstracting away CSS and many HTTP and HTML characteristics (see <a href="http://thoughtworks.fileburst.com/assets/technology-radar-jan-2014-en.pdf">ThoughtWork&#8217;s report</a>). Consequently, when web designers who live and breathe CSS and standard HTML come to help on a JSF project they are slowed to a stall. <em>JSF does not align with the natural decoupling of roles</em> in a web development project:
</p>
<ul>
<li>
back-end developers (skilled in the technology of their choice)
</li>
<li>
front-end developers (skilled in CSS, Javascript and HTML)
</li>
</ul>
<p>
    JSF can be seen as <em>a technology choice of back-end developers which is forced upon front-end developers</em>. For anyone working on a project which is likely to have dedicated front-end developers, I advise against using JSF. Instead, I suggest using REST with JX-RS (if you are using Java EE), or another framework, such as the <a href="http://www.playframework.com/" target="_blank">Java Play Framework</a>. 
</p>
<h2>The potential power of Java EE</h2>
<p>
All the difficulties aside, Java EE embodies a powerful set of technologies. Java EE abstracts away a phenomenal amount of complexity and creates a structure to encourage flexibility and extensibility which is hard to break. Once Java EE is tamed, a single developer can become as productive as a small team of developers which use more basic frameworks (assuming the application is complex enough). The uphill climb to tame Java EE and the many ways to stumble along the way makes Java EE the Charizard of web frameworks. <span class="note">(Java EE is much more than a web framework, but this discussion focuses on the use of Java EE to create web applications)</span>. 
</p>

<h2>Further reading</h2>
<p>
If you decide to start or continue learning Java EE, here are some of the books and other resources I have found useful:
</p>
<ul>
<li><a href="http://www.amazon.com/gp/product/1935182994/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182994&amp;linkCode=as2&amp;tag=kevidoraprog-20&amp;linkId=3LF44BQXRCUDICFO">EJB 3 in Action</a><img alt="" border="0" src="http://ir-na.amazon-adsystem.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=1935182994" height="1" style="border: none !important; margin: 0px !important;" width="1" /></li>
<li><a href="http://www.amazon.com/gp/product/0137012896/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0137012896&amp;linkCode=as2&amp;tag=kevidoraprog-20&amp;linkId=UOEYOA66DTJBPII6">Core JavaServer Faces (3rd Edition)</a><img alt="" border="0" src="http://ir-na.amazon-adsystem.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=0137012896" height="1" style="border: none !important; margin: 0px !important;" width="1" />

</li>
<li><a href="http://www.amazon.com/gp/product/143024626X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=143024626X&amp;linkCode=as2&amp;tag=kevidoraprog-20&amp;linkId=QOBZFECHSXOFTF3Q">Beginning Java EE 7</a><img alt="" border="0" src="http://ir-na.amazon-adsystem.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=143024626X" height="1" style="border: none !important; margin: 0px !important;" width="1" />
</li>
<li><a href="http://en.wikibooks.org/wiki/Java_Persistence" target="_blank">Java Persistence Wikibook</a></li>
</ul>
<p>
I used the previous editions of some of these books, as it was a while ago when I started using Java EE. 
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solr Tutorial]]></title>
    <link href="http://kevindoran.github.io/solr-tutorial/"/>
    <updated>2014-06-04T12:15:47+12:00</updated>
    <id>http://kevindoran.github.io/solr-tutorial</id>
    <content type="html"><![CDATA[<p>
	I recently had the need to search a large amount of online auction data. I had access to the data associated with a large number of online auctions, similar to auctions on eBay. I needed to quickly find auctions whose title and description match a given set of search terms. My solution was to use <a href="http://en.wikipedia.org/wiki/Apache_Solr" target="_blank">Solr</a>, an open source search application/platform.&nbsp; This post describes the steps I carried out to set-up Solr, and the difficulties encountered along the way. The post covers Solr 4.8. <br />
</p>
<!-- more -->
<p>
	The decision to use Solr was based on the need for a fast and customisable mechanism to search for auctions. Initially, MySQL&#8217;s <a href="http://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html" target="_blank">fulltext search</a> was used. This was slow, inflexible and had a number of issues such as not recognising numbers or common words.<br />
</p>

<h2>Overview of Solr operation</h2>
<p>
	Solr behaves in many ways like a web server such as Apache: once started, Solr uses the data in its installation directory to serve responses to client requests. The major difference is that Solr is serving search results (in XML, JSON or other formats) as opposed to web pages. The Solr installation is completely standalone: the Solr directory contains everything needed to start and run the server, including a Java Servlet container and all the application data. Solr is controlled using configuration files. Four files in particular play an important role:<code>solr.xml</code>, <code>solrconfig.xml</code>, <code>schema.xml</code> and <code>solr-data-config.xml</code> (schema.xml and solr-data-config.xml can have custom names).<br />
</p>

<h2>Starting Solr</h2>
<p>
	To start Solr in its default state, navigate to:
	<code class="code-block">
		apache-solr-X.X.X/example/</code>
	and run:
	<br />
	<code class="code-block"> 
		java -jar start.jar
	</code>
	This starts the server and sets Solr to use the default home directory, <code>./solr</code>.
</p>

<p>
	When making your own Solr instance, it is a good idea to start by copying the default Solr directory, name it as you wish, and start working with this new Solr instance. 
	Assuming I call my Solr directory <code>AuctionSearch</code>, to start Solr after making the new directory, run:
	<br />
	<code class="code-block">
		java -jar start.jar -Dsolr.solr.home=AuctionSearch
	</code>
	After running this command, you can browse to <a href="http://localhost:8983/solr/">http://localhost:8983/solr/</a> to view the administration user interface. The default Solr instance doesn&#8217;t have any documents indexed (or it might have just one), so there wont be much to tinker with until more documents are added. Before adding documents, however, some configuration will probably be needed.
</p>

<h2>Configuring Solr</h2>
<p>
	Configuring Solr is not typically done once- instead a cycle of 
	configuring and testing is carried out. Even months after I initially 
	set up Solr to work for my application, I am still tweaking it as I 
	learn more about Solr and learn more about my data. Despite this cyclic 
	nature, the configuration of Solr will be described here in a linear fashion. 
	However, jumping between sections is encouraged. In turn, the following will be discussed:
</p>
<ul>
	<li><code>solr.xml</code> Solr cores</li>
	<li><code>schema.xml</code> Document structure</li>
	<li><code>solrconfig.xml</code> Request handlers</li>
</ul>

<p>
	When configuring Solr, it is helpful to have a picture of the Solr home directory structure, and to know where all the configuration files are located. The image below shows important configuration files within the example Solr directory.
</p>
<img id="solrDirectory" class='img-responsive' src="http://kevindoran.github.io/images/solrDirectoryStructure.jpg" alt="Solr Directory Structure"/>

<h2>Solr cores</h2>
<p>
	A Solr core manages a single <em>index</em>. An index is the set of all data used to store information about documents to be searched. Each index can have only one document schema associated with it (only one document format can be stored). Using multiple cores allows a single Solr instance (single server, single administration web page) to manage multiple indexes. A use case (context: auction website) for this might be having one core for indexing auction data and another for indexing information on users. Each core will have its own core directory. 
	Cores are configured in <code>solr.xml</code>. An example <code>solr.xml</code>:<br />
</p>

<figure class='code'><figcaption><span>solr.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- persistent=&quot;true&quot; allows the web interface to make lasting changes to Solr. --&gt;</span>
</span><span class='line'><span class="nt">&lt;solr</span> <span class="na">persistent=</span><span class="s">&quot;true&quot;</span> <span class="na">sharedlib=</span><span class="s">&quot;lib&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;cores</span> <span class="na">adminpath=</span><span class="s">&quot;/admin/cores&quot;</span> <span class="na">host=</span><span class="s">&quot;${host:}&quot;</span> <span class="na">hostcontext=</span><span class="s">&quot;${hostContext:}&quot;</span> <span class="na">hostport=</span><span class="s">&quot;${jetty.port:}&quot;</span> <span class="na">zkclienttimeout=</span><span class="s">&quot;${zkClientTimeout:15000}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;core</span> <span class="na">default=</span><span class="s">&quot;true&quot;</span> <span class="na">instancedir=</span><span class="s">&quot;auctions&quot;</span> <span class="na">name=</span><span class="s">&quot;auctions&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/core&gt;&lt;/cores&gt;</span>
</span><span class='line'><span class="nt">&lt;/solr&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
	Usually, the default <code>solr.xml</code> is sufficient. You may want to change the core names and core directory names. <a href="https://cwiki.apache.org/confluence/display/solr/Solr+Cores+and+solr.xml" target="_blank">Further details</a> on configuring <code>solr.xml</code>.
</p>
<p>
	In Solr 4.3 and above, <code>solr.xml</code> has a <a href="https://cwiki.apache.org/confluence/display/solr/Format+of+solr.xml">new purpose and a new format</a>. In Solr 5.0 and above, the older format will not be supported. 
</p>

<h2>Schema</h2>
<p>
	A Solr schema describes the basic unit of information: a <em>document</em>. Each Solr core has a single schema, and thus, indexes only one &#8216;form&#8217; of document. A document is composed of multiple <em>fields</em>. Each field has a <em>type</em>. This type is defined in the schema and specifies the underlying Java class that is created when the field is indexed. The type also specifies the text analysis (processing/digestion) that is carried out when the field is indexed. An example document and a section of the corresponding <code>schema.xml</code> is shown below.
</p>

<figure class='code'><figcaption><span>exampleSolrDoc.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;doc&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;auction_id&quot;</span><span class="nt">&gt;</span>54432834<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>Dell M2012 24&quot; IPS Monitor<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span><span class="nt">&gt;</span>monitors<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;current_bid&quot;</span><span class="nt">&gt;</span>279.95<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;end_date&quot;</span><span class="nt">&gt;</span>2013-01-06T09:26:04.18Z<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature&quot;</span><span class="nt">&gt;</span>IPS<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>    <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature&quot;</span><span class="nt">&gt;</span>Swivel<span class="nt">&lt;/field&gt;</span>
</span><span class='line'><span class="nt">&lt;/doc&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<br />
<figure class='code'><figcaption><span>schema.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;schema</span> <span class="na">name=</span><span class="s">&quot;example&quot;</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;_version_&quot;</span> <span class="na">type=</span><span class="s">&quot;long&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;auction_id&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span> <span class="na">type=</span><span class="s">&quot;text_en&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;current_bid&quot;</span> <span class="na">type=</span><span class="s">&quot;currency&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;end_date&quot;</span> <span class="na">type=</span><span class="s">&quot;date&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fields&gt;</span>
</span><span class='line'>    <span class="nt">&lt;uniqueKey&gt;</span>auction_id<span class="nt">&lt;/uniqueKey&gt;</span>
</span><span class='line'>    <span class="nt">&lt;types&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;string&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.StrField&quot;</span> <span class="na">sortMissingLast=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;date&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TrieDateField&quot;</span> <span class="na">precisionStep=</span><span class="s">&quot;0&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;long&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TrieLongField&quot;</span> <span class="na">precisionStep=</span><span class="s">&quot;0&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_en&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;100&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- lots of details --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/fieldType&gt;</span>
</span><span class='line'>        <span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;currency&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.CurrencyField&quot;</span> <span class="na">precisionStep=</span><span class="s">&quot;8&quot;</span> <span class="na">defaultCurrency=</span><span class="s">&quot;USD&quot;</span> <span class="na">currencyConfig=</span><span class="s">&quot;currency.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/types&gt;</span>
</span><span class='line'><span class="nt">&lt;/schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
	The components of schema.xml will now be described.
</p>

<h3>Fields</h3>
<p>
	A field describes a piece of information within a document. It controls aspects of the indexing process such as what Java type is used to represent the data, whether the data is stored, whether the field is required in every document etc. There are two types of special fields: <em>copyField</em> and <em>dynamicField</em> (not to be confused with the type parameter such as type=&#8221;string&#8221;). 
</p>
<dl>
	<dt>copyField</dt>
	<dd>Copy fields allow you to index a field in more than one way. A field is copied allowing different field types, such as <code>text_en</code> or <code>string</code> to be applied to the single piece of information.</dd>
	<dt>dynamicField</dt>
	<dd>Dynamic fields are, in a way, an inverse to copying fields; they allow you to process multiple fields in the same way. Their most useful feature is their ability to match document fields with pattern matching. A common usage of dynamic fields is to catch all fields in a document which should not be indexed. This is required, as when fields are indexed, all document fields must be processed, or an error is thrown.</dd>
</dl>
<p>
	An example of using copy and dynamic fields is show below:
</p>
<figure class='code'><figcaption><span>schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;schema</span> <span class="na">name=</span><span class="s">&quot;example&quot;</span> <span class="na">version=</span><span class="s">&quot;1.5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fields&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span> <span class="na">type=</span><span class="s">&quot;text_en&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;true&quot;</span> <span class="na">required=</span><span class="s">&quot;false&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;allText&quot;</span> <span class="na">type=</span><span class="s">&quot;text_en&quot;</span> <span class="na">indexed=</span><span class="s">&quot;true&quot;</span> <span class="na">stored=</span><span class="s">&quot;false&quot;</span> <span class="na">required=</span><span class="s">&quot;true&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/fields&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;title&quot;</span> <span class="na">dest=</span><span class="s">&quot;allText&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;category&quot;</span> <span class="na">dest=</span><span class="s">&quot;allText&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;copyField</span> <span class="na">source=</span><span class="s">&quot;feature&quot;</span> <span class="na">dest=</span><span class="s">&quot;allText&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dynamicField</span> <span class="na">name=</span><span class="s">&quot;*&quot;</span> <span class="na">type=</span><span class="s">&quot;ignored&quot;</span> <span class="na">multiValued=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Analysers, tokenisers and filters</h3>
<p>
Each field has a type, and each type is defined by a set of analysers (which are made up of tokenizers and filters). 
</p>
<dl>
	<dt>Analyser</dt>
	<dd>An analyzer converts the text of a field and modifies it to form the 
		text that is indexed. Analyzers are made up of one or more tokenizer 
		and/or filter.  Seeing as analyzers are 
		constructed from filters and tokenizers in an adhoc manor, they don&#8217;t 
		really have a name; they will just be identified by the <code>fieldType</code> where
		they are defined.</dd>
	<dt>Tokenizer</dt>
	<dd>A tokenizer breaks up a stream of text into units, called tokens. For example, the text: &#8220;Please like my blog&#8221;, might be passed through a filter to produce the 4 tokens: (Please, like, my, blog) or using another type of tokenizer: (p, l, e, a, s, e, l, i, k, e, m, y, b, l, o, g).</dd>
	<dt>Filter</dt>
	<dd>Filters take in tokens, transform them, and output the transformed tokens (they can modify or discard them). A example: a filter which converts all text to lowercase.</dd>
</dl>
<p>
	A useful note: analyzers can operate both at index time and at query time. In other words, they transform both the documents that are indexed and the search terms that are used by a user.
</p>

<p>
	A reasonably complex analyzer is shown below. It is defined in the example Solr <code>schema.xml</code> file for the <code>fieldType</code> text_en:
</p>
<figure class='code'><figcaption><span>schemaPart.xml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;fieldType</span> <span class="na">name=</span><span class="s">&quot;text_en&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.TextField&quot;</span> <span class="na">positionIncrementGap=</span><span class="s">&quot;100&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>		<span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.StandardTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.StopFilterFactory&quot;</span>
</span><span class='line'>			<span class="na">ignoreCase=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>			<span class="na">words=</span><span class="s">&quot;lang/stopwords_en.txt&quot;</span>
</span><span class='line'>			<span class="na">enablePositionIncrements=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>			<span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.EnglishPossessiveFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.KeywordMarkerFilterFactory&quot;</span> <span class="na">protected=</span><span class="s">&quot;protwords.txt&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.PorterStemFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'>	<span class="nt">&lt;analyzer</span> <span class="na">type=</span><span class="s">&quot;query&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>		<span class="nt">&lt;tokenizer</span> <span class="na">class=</span><span class="s">&quot;solr.StandardTokenizerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.SynonymFilterFactory&quot;</span> <span class="na">synonyms=</span><span class="s">&quot;synonyms.txt&quot;</span> <span class="na">ignoreCase=</span><span class="s">&quot;true&quot;</span> <span class="na">expand=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.StopFilterFactory&quot;</span>
</span><span class='line'>			<span class="na">ignoreCase=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>			<span class="na">words=</span><span class="s">&quot;lang/stopwords_en.txt&quot;</span>
</span><span class='line'>			<span class="na">enablePositionIncrements=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>			<span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.LowerCaseFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.EnglishPossessiveFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.KeywordMarkerFilterFactory&quot;</span> <span class="na">protected=</span><span class="s">&quot;protwords.txt&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;filter</span> <span class="na">class=</span><span class="s">&quot;solr.PorterStemFilterFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/analyzer&gt;</span>
</span><span class='line'><span class="nt">&lt;/fieldType&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Schema snares</h2>
<p>
There are two issues I encountered when creating a schema for which I had trouble finding information online. Consider coming back to this section if you have issues. 
</p>
<h3>Multivalued fields</h3>
<p>
Multivalued refers to the possibility of their being two values for present in the same document for a single field. For example, for the document shown below, there is always only one title. An example of a multivalued field is the feature field, this can have many values in a single document. What is important to realise when using multivalued fields, is that the data gets flattened. If an auction has 2 features, then the two features get flattened such that the relationship between the name and the value of the feature is lost. 
</p>

<figure class='code'><figcaption><span>schemaPart.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- What an auction might look like in its original XML form: --&gt;</span>
</span><span class='line'><span class="nt">&lt;auction&gt;</span>
</span><span class='line'>	<span class="nt">&lt;title&gt;</span>Desktop PC<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>	<span class="nt">&lt;feature&gt;</span>
</span><span class='line'>		<span class="nt">&lt;name&gt;</span>RAM<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>		<span class="nt">&lt;value&gt;</span>16 GB<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/feature&gt;</span>
</span><span class='line'>	<span class="nt">&lt;feature&gt;</span>
</span><span class='line'>		<span class="nt">&lt;name&gt;</span>CPU Frequency<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>		<span class="nt">&lt;value&gt;</span>4.5 GHz<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/feature&gt;</span>
</span><span class='line'><span class="nt">&lt;/auction&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- What an auction would look like as a Solr document: --&gt;</span>
</span><span class='line'><span class="nt">&lt;doc&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>Desktop PC<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature_name&quot;</span><span class="nt">&gt;</span>RAM<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature_value&quot;</span><span class="nt">&gt;</span>16 GB<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature_name&quot;</span><span class="nt">&gt;</span>CPU Frequency<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature_value&quot;</span><span class="nt">&gt;</span>4.5 GHz<span class="nt">&lt;/field&gt;</span>
</span><span class='line'><span class="nt">&lt;/doc&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- The *effect* of multivalued field flattening: --&gt;</span>
</span><span class='line'><span class="nt">&lt;doc&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>Desktop PC<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature_name&quot;</span><span class="nt">&gt;</span>RAM CPU Frequency<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;feature_value&quot;</span><span class="nt">&gt;</span>16 GB 4.5 GHz<span class="nt">&lt;/field&gt;</span>
</span><span class='line'><span class="nt">&lt;/doc&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	By observing the way the data is indexed, it is clear that the relationship between the name and value pairs is lost. In other words, one to many relationships cannot be maintained by Solr in a single index (the is an exotic method of using multiple indexes and multiple cores). From a relational database point of view, Solr flattens all data into a single &#8216;table&#8217;.
</p>

<h3>PolyFields</h3>
<p>
	A ployfield, such as the <code>Currency</code> field, is a field that requires more than one value to be stored when it is indexed. The currency field needs to store both the amount of money and the currency of the money. Polyfields <em>must</em> have <code>stored=true</code>, or errors will result.
</p>

<h2>solrconfig.xml</h2>
<p>
	<code>solrconfig.xml</code> is used to configure many aspects of Solr&#8217;s operation, for example, it is used to configure:
</p>
<ul>
	<li>request handlers</li>
	<li>listeners (listen for requests sent to handlers) </li>
	<li>admin interface</li>
	<li>replication and duplication</li>
</ul>
<p>
	Typically, the only changes that need to be made to <code>solrconfig.xml</code> are to add or alter search and index request handlers. These two examples will be covered in the Indexing and Searching sections respectively. 
</p>

<h2>Indexing data</h2>
<p>
There two difficult issues I encountered for which it can be hard to uncover the cause of the problem. This section can be skipped and returned to if issues arise.
</p>
<p>
	There are two ways I have used to add documents to an index: posting XML 
	to a request handler or importing it from a database. All the data I index is also stored in a database. I initially carry out a data import from a database to catch up on the 
	database from an empty state. Once this import is finished, new 
	documents are added to the index by sending the documents in XML form to Solr via HTTP post.
</p>

<h3>Importing from a database</h3>
<p>
	Importing data from a database in carried out using the <a href="https://cwiki.apache.org/confluence/display/solr/Uploading+Structured+Data+Store+Data+with+the+Data+Import+Handler" target="_blank">Data Import Handler</a> 
	(DIH). To use the DIH, a configuration file must be created to direct 
	the conversion. In addition to the configuration file, a request handler must be specified in <code>solrconfig.xml</code> for the DIH. The details of writing the configuration file is given in the above link.
</p>

<h3>Posting XML</h3>
<p>
	Once Solr has indexed the entire database, new documents are added by posting them to a Solr request handler. <a href="https://wiki.apache.org/solr/Solrj" target="_blank">SolrJ</a>, a Java API for Solr, is used to do the posting. Solr comes with a simple request handler for adding documents by posting XML. It is defined in solrconfig.xml as follows:
</p>
<figure class='code'><figcaption><span>solrconfigPart.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- in solrconfig.xml --&gt;</span>
</span><span class='line'><span class="nt">&lt;requestHandler</span> <span class="na">name=</span><span class="s">&quot;/update&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.UpdateRequestHandler&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	Thus, by sending XML to the URL <a href="http://localhost:8983/solr/coreName/update">http://localhost:8983/solr/coreName/update</a>, Solr will add the document to the index. Unfortunately, in most situations, if you already have XML data which you want to index, it probably wont exist in the format that Solr expects. For example, compare the following:
</p>
<figure class='code'><figcaption><span>comparison.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- original XML format: --&gt;</span>
</span><span class='line'><span class="nt">&lt;auction&gt;</span>
</span><span class='line'>	<span class="nt">&lt;auction_id&gt;</span>54432834<span class="nt">&lt;/auction_id&gt;</span>
</span><span class='line'>	<span class="nt">&lt;title&gt;</span>Dell M2012 24&quot; IPS Monitor<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>	<span class="nt">&lt;category&gt;</span>monitors<span class="nt">&lt;/category&gt;</span>
</span><span class='line'>	<span class="nt">&lt;current_bid&gt;</span>279.95<span class="nt">&lt;/current_bid&gt;</span>
</span><span class='line'><span class="nt">&lt;/auction&gt;</span>
</span><span class='line'><span class="c">&lt;!-- The format Solr requires: --&gt;</span>
</span><span class='line'><span class="nt">&lt;doc&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;auction_id&quot;</span><span class="nt">&gt;</span>54432834<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>Dell M2012 24&quot; IPS Monitor<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;category&quot;</span><span class="nt">&gt;</span>monitors<span class="nt">&lt;/field&gt;</span>
</span><span class='line'>	<span class="nt">&lt;field</span> <span class="na">name=</span><span class="s">&quot;current_bid&quot;</span><span class="nt">&gt;</span>279.95<span class="nt">&lt;/field&gt;</span>
</span><span class='line'><span class="nt">&lt;/doc&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	Thus, there is a need to convert the original XML into the form which Solr expects. There are two ways to do this conversion:
</p>
<ol class='detailed-list'>
	<li> In Java: JAXP API can be used to carry out the conversion. This will require writing custom code to do the conversion. Alternatively, if your data exists as Java classes, you can index those through SolrJ, which has a persistence mechanism allowing Java objects to be indexed directly. </li>
	<li> Use XSLT: Configure the Solr request handler to transform the 
		posted XML using a specified XSLT before trying to index the document. An XSLT file to transform an XML document (with root XML element &#8216;Auction&#8217;) is shown below:</li>
</ol>
<figure class='code'><figcaption><span>xmlToSolrDoc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- the 2.0 version of xsl reqires a custom processor to be used. Saxon9he is used, and is</span>
</span><span class='line'><span class="c">located in Jetty&#39;s ext/ folder. This library requires Jetty to be started like so:</span>
</span><span class='line'><span class="c">java -Djavax.xml.transform.TransformerFactory=net.sf.saxon.TransformerFactoryImpl -jar start.jar</span>
</span><span class='line'><span class="c">--&gt;</span>
</span><span class='line'><span class="nt">&lt;xsl:stylesheet</span> <span class="na">version=</span><span class="s">&quot;2.0&quot;</span>
</span><span class='line'>                <span class="na">xmlns:xsl=</span><span class="s">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>
</span><span class='line'>                <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>
</span><span class='line'>                <span class="na">xmlns:fn=</span><span class="s">&quot;http://www.w3.org/2005/xpath-functions&quot;</span>
</span><span class='line'>                <span class="na">xmlns:xdt=</span><span class="s">&quot;http://www.w3.org/2005/xpath-datatypes&quot;</span>
</span><span class='line'>                <span class="na">xmlns:err=</span><span class="s">&quot;http://www.w3.org/2005/xqt-errors&quot;</span>
</span><span class='line'>                <span class="na">xmlns:tm=</span><span class="s">&quot;http://api.trademe.co.nz/v1&quot;</span>
</span><span class='line'>                <span class="na">exclude-result-prefixes=</span><span class="s">&quot;xs xdt err fn tm&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;xsl:output</span> <span class="na">method=</span><span class="s">&quot;xml&quot;</span> <span class="na">indent=</span><span class="s">&quot;yes&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- &#39;Auction&quot; is the root XML element --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:template</span> <span class="na">match=</span><span class="s">&quot;tm:Auction&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;add&gt;&lt;doc&gt;</span>
</span><span class='line'>                <span class="nt">&lt;xsl:for-each</span> <span class="na">select=</span><span class="s">&quot;//text()/.. intersect child::*&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;field&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xsl:attribute</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;name()&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/xsl:attribute&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;.&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/field&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/xsl:for-each&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;xsl:for-each</span> <span class="na">select=</span><span class="s">&quot;//text()/.. except child::*&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;field&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xsl:attribute</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;../name()&quot;</span><span class="nt">/&gt;</span>_<span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;name()&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/xsl:attribute&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;.&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/field&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/xsl:for-each&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/doc&gt;&lt;/add&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsl:template&gt;</span>
</span><span class='line'><span class="nt">&lt;/xsl:stylesheet&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Indexing snares</h2>
<p>
	There are two issues I encountered for which I had trouble finding information online. Consider coming back to this section if you have issues with indexing or the DIH, and you might be in luck.
</p>
<h3>Letter case in the DIH configuration file</h3>
<p>
	Table and row names in the DIH configuration file are tediously case-sensitive-ish. Some places the case doesn&#8217;t matter, and other places it does. Where it does matter, the table and row names must be in the exact same form as in the database. Also, case must be internally consistent within the configuration file for most name usages.
</p>
<h3>Missing fields in posted XML and DIH mapping everything to the ignore field</h3>
<p>
	These two seemingly unrelated issues are linked by the presence of a dynamic field in <code>schema.xml</code>. When posting XML data, all fields defined in the schema file <strong>must be present</strong> in the XML file being posted. If there are fields in the XML document which are not used in the index, errors are throw when posting the XML. The way around this is to create a catch-all field:
	this schema field catches all fields in the document which have not been mapped to another field. This workaround, however, interferes with the operation of the DIH. The DIH, annoyingly, maps nearly all fields to the catch-all field. This may have something to do with the nice feature of the DIH which allows you to leave out every mapping from row-&gt;field if the row and field have the same name. Leaving out these mappings, however, seems to cause all fields to map to the catch-all ignore field. My current hack involves changing the <code class="inline-green-code">schema.xml</code> file every time I want to import documents using the DIH.
</p>

<h2>Searching</h2>
<p>
	Search requests are carried out by request handlers which parse and process searches. A good way to describe search handlers is through an example. The following is a search request handler I use:
</p>
<figure class='code'><figcaption><span>requestHandler.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;requestHandler</span> <span class="na">name=</span><span class="s">&quot;/broadQuery&quot;</span> <span class="na">class=</span><span class="s">&quot;solr.SearchHandler&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;lst</span> <span class="na">name=</span><span class="s">&quot;defaults&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;defType&quot;</span><span class="nt">&gt;</span>edismax<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- The search parser to use. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;wt&quot;</span><span class="nt">&gt;</span>xml<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- Output type. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;fl&quot;</span><span class="nt">&gt;</span>auction_id title<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- The fields to list in the search response --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;qf&quot;</span><span class="nt">&gt;</span>Title^2 Feature<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- The fields (and their weightings) to search in.--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;rows&quot;</span><span class="nt">&gt;</span>100<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- The number of results to return. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;pf&quot;</span><span class="nt">&gt;</span>Title^4 Feature^2<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- Phrase field (and their weightings). Fields to search for closely located matches. --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;ps&quot;</span><span class="nt">&gt;</span>0<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- Phrase slop. How many tokens apart must words be to be able to qualify as a phrase--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;echoParams&quot;</span><span class="nt">&gt;</span>all<span class="nt">&lt;/str&gt;</span> <span class="c">&lt;!-- Print the search settings in the search results. Just a handy feature --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;str</span> <span class="na">name=</span><span class="s">&quot;mm&quot;</span><span class="nt">&gt;</span>3<span class="ni">&amp;lt;</span>-1 5<span class="ni">&amp;lt;</span>-2 6<span class="ni">&amp;lt;</span>-40%<span class="nt">&lt;/str&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 3&gt;-1 5&gt;-2 6&gt;-40% Means: If there are 1-3 search terms, they are all required to</span>
</span><span class='line'><span class="c">        &lt;!-- match. If there are 4-5 search terms, then (all - 1) must match.</span>
</span><span class='line'><span class="c">        If there are 5-6 search terms, then (all -2) must match</span>
</span><span class='line'><span class="c">        If there are &gt;6 search terms, then (all - 40%) must match. --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/lst&gt;</span>
</span><span class='line'><span class="nt">&lt;/requestHandler&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	All these parameters can be specified at query time also; defining them within the request handler definition simply specifies defaults. To use this search handler I would navigate/send request to:
</p>
<p>
	<a href="http://localhost:8983/solr/auctions/broadQuery?q=dell+monitor+IPS">http://localhost:8983/solr/auctions/broadQuery?q=dell+monitor+IPS</a>
	<br/>
	<span class='note'>
		(Assuming that &#8216;auctions&#8217; is the name of your Solr core, and Solr is hosted on localhost)
	</span>
</p>

<p>While most of the search handler&#8217;s configuration can be understood from the comments, defType, pf, ps and mm might need further explanation:
</p>
<dl>
	<dt>defType</dt>
	<dd>defType specifies the search parser to use. There are a number of popular search parsers including <a href="https://cwiki.apache.org/confluence/display/solr/The+Standard+Query+Parser" target="_blank">Standard Search</a>,<a href="https://cwiki.apache.org/confluence/display/solr/The+DisMax+Query+Parser" target="_blank">DisMax</a> and <a href="https://cwiki.apache.org/confluence/display/solr/The+Extended+DisMax+Query+Parser" target="_blank">eDisMax</a>. eDismax combines the features of both the Standard Search and DisMax; eDisMax supports the full query syntax of the Lucene Standard Query, but is far more tolerant of syntax errors. eDismax seems like the obvious choice in most circumstances.</dd>
	<dt>pf</dt>
	<dd>pf (phase fields) specifies what fields should be checked for having matching &#8216;phrases&#8217;. If matching terms are close enough together, then they can be considered a phrase. A result with a matching phrase will score higher than one with no matching phase. You can also specify a weighting: a field weighting will control the effect of a match on the match&#8217;s score. For example, a phrase found in the title will score higher that one found in feature.</dd>
	<dt>ps</dt>
	<dd>ps (phrase slop) specifies how many terms can be in-between two matching terms and still allow the matching terms to be considered a matching phrase.</dd>
</dl>

<h2>Searching from Java</h2>
<p>
	Searching can be carried out from Java with the use of <a href="https://wiki.apache.org/solr/Solrj" target="_blank">SolrJ</a>. The gist below shows a very simple method utilizing SolrJ:
</p>
<figure class='code'><figcaption><span>Search.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleSolrSearch</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">solrUrl</span> <span class="o">=</span> <span class="s">&quot;http://192.168.1.103:8983/solr/auctions&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SolrServer</span> <span class="n">server</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SimpleSolrSearch</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpSolrServer</span><span class="o">(</span><span class="n">solrUrl</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">search</span><span class="o">(</span><span class="n">String</span> <span class="n">searchTerms</span><span class="o">,</span> <span class="n">String</span> <span class="n">category</span><span class="o">,</span> <span class="n">BigDecimal</span> <span class="n">maxBidAmount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SolrServerException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SolrQuery</span> <span class="n">query</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SolrQuery</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">categoryFilter</span> <span class="o">=</span> <span class="s">&quot;category:\&quot;&quot;</span> <span class="o">+</span> <span class="n">category</span> <span class="o">+</span> <span class="s">&quot;\&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">addFilterQuery</span><span class="o">(</span><span class="n">categoryFilter</span><span class="o">);</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">addFilterQuery</span><span class="o">(</span><span class="s">&quot;current_bid:[1 TO &quot;</span> <span class="o">+</span> <span class="n">maxBidAmount</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">query</span><span class="o">.</span><span class="na">setQuery</span><span class="o">(</span><span class="n">searchTerms</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">QueryResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">server</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</span><span class='line'>        <span class="n">SolrDocumentList</span> <span class="n">documentList</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getResults</span><span class="o">();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">auctionIds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">SolrDocument</span> <span class="n">doc</span> <span class="o">:</span> <span class="n">documentList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">listingId</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="n">doc</span><span class="o">.</span><span class="na">getFirstValue</span><span class="o">(</span><span class="s">&quot;auction_id&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="n">auctionIds</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">listingId</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">auctionIds</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Further reading</h2>
<p>
	I have briefly covered many common tasked carried out when using Solr. There are many more features: search faceting, search clustering, distributed searches and index replication to name a few. There are many comprehensive sources available. Some useful sources I would suggest:
</p> 
<ul>
	<li><a href="http://www.amazon.com/gp/product/1617291021/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1617291021&linkCode=as2&tag=kevidoraprog-20&linkId=WHTDMHU3HOMEGTUP" target="_blank">Solr in Action</a></li>
	<li><a href="https://cwiki.apache.org/confluence/display/solr/Apache+Solr+Reference+Guide" target="_blank">Lucid Works&#8217; Solr Reference Guide</a></li>
	<li><a href="http://www.amazon.com/gp/product/193398838X/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=193398838X&linkCode=as2&tag=kevidoraprog-20&linkId=FGBKCGZ6BOOMWOGZ" target="_blank">Taming Text</a> (practical guide for all types of text searching and manipulations)</li>
	<li><a href="http://www.amazon.com/gp/product/1933988177/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1933988177&amp;linkCode=as2&amp;tag=kevidoraprog-20" target="_blank">Lucene in Action, 2nd Edition</a> (if you want to go to a lower level than Solr)</li>
	<li><a href="http://www.amazon.com/gp/product/1935182854/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182854&amp;linkCode=as2&amp;tag=kevidoraprog-20" target="_blank">Tika in Action</a> (if you want to index and search documents such as PDFs)</li>
</ul>


]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bluetooth Programming with Python 3]]></title>
    <link href="http://kevindoran.github.io/bluetooth-programming-with-python-3/"/>
    <updated>2013-04-21T19:10:33+12:00</updated>
    <id>http://kevindoran.github.io/bluetooth-programming-with-python-3</id>
    <content type="html"><![CDATA[<p>
This post presents basic techniques for communicating over Bluetooth with Python 3.3 and above (using Python sockets). Some simple examples of communicating over 
Bluetooth with sockets will be shown. <a href="http://code.google.com/p/pybluez/">PyBluez</a> examples will also be presented for 
comparison.
</p>

<!-- more -->

<h2>The two options</h2>
<p>
Currently, the most widely documented way to communicate with Python over Bluetooth is to use <a href="http://code.google.com/p/pybluez/" target="">PyBluez.</a> Previously, PyBluez only supported Python 2. In January 2014, they released a Python 3 version. <br />
</p>
<p>
Python 3.3&#8217;s <a href="http://docs.python.org/3.3/library/socket.html" target="">native Python sockets</a> support Bluetooth communication. Unfortunately, there is very little documentation available describing <i>how</i> to use Python sockets to communicate over Bluetooth. While using Bluetooth with these sockets might be easy for someone who already knows how to use Python sockets, the lack of documentation leaves many people unaware that this method of using Bluetooth even exists. Since PyBluez was ported to Python 3, the use of native Python sockets has limited use.<br />
</p>

<h2>Required skill: finding the MAC address of a bluetooth adapter</h2>
<p>
To run the examples, the MAC address of the Bluetooth adapter used by the server must be known. The client application uses this address to connect to the server. On Linux, you can get a list of all available Bluetooth devices and their MAC addresses using the command <code class="inline-green-code">hciconfig</code>, like so:<br />
</p>
<img id='hciconfig' class='img-responsive' src='http://kevindoran.github.io/images/hciconfig.png' alt='hciconfig output'/>
<h2>Client sever messaging</h2>
<p>
This application connects two devices over Bluetooth and allows one to send messages to the other. The sending device runs <code class="inline-green-code">socketClient.py</code>, and the receiving device runs <code class="inline-green-code">socketServer.py</code>. These scripts are shown below, first using Python sockets, then using PyBluez:
</p>
<h3>Python sockets</h3>
<figure class='code'><figcaption><span>Client (socketClient.py)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">A simple Python script to send messages to a sever over Bluetooth using</span>
</span><span class='line'><span class="sd">Python sockets (with Python 3.3 or above).</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'><span class="n">serverMACAddress</span> <span class="o">=</span> <span class="s">&#39;00:1f:e1:dd:08:3d&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_BLUETOOTH</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">BTPROTO_RFCOMM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">serverMACAddress</span><span class="p">,</span><span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">text</span> <span class="o">==</span> <span class="s">&quot;quit&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="s">&#39;UTF-8&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span>Server (socketServer.py)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">A simple Python script to receive messages from a client over</span>
</span><span class='line'><span class="sd">Bluetooth using Python sockets (with Python 3.3 or above).</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'><span class="n">hostMACAddress</span> <span class="o">=</span> <span class="s">&#39;00:1f:e1:dd:08:3d&#39;</span> <span class="c"># The MAC address of a Bluetooth adapter on the server. The server might have multiple Bluetooth adapters.</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">3</span> <span class="c"># 3 is an arbitrary choice. However, it must match the port used by the client.</span>
</span><span class='line'><span class="n">backlog</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="mi">1024</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_BLUETOOTH</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">BTPROTO_RFCOMM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">hostMACAddress</span><span class="p">,</span><span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">backlog</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">client</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>	
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Closing socket&quot;</span><span class="p">)</span>	
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>
As an aside, this code is almost identical to code required to create a client-server application over the internet. All that needs to be changed is the two lines:
</p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># For the Server</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s">&quot;192.168.1.17&quot;</span><span class="p">,</span><span class="mi">50001</span><span class="p">))</span> <span class="c"># The Bluetooth MAC Address and RFCOMM port is replaced with an IP Address and a TCP port.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For the Client</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;192.168.1.17&quot;</span><span class="p">,</span><span class="mi">50001</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Note: these are arbitrary IP addresses and TCP ports.</span>
</span></code></pre></td></tr></table></div></figure>

<h3>PyBluez</h3>
<p>
To compare, below is the functionally identical application written using the PyBluez library.<br />
</p>
<figure class='code'><figcaption><span>Client (PyBluezClient.py)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">A simple Python script to send messages to a sever over Bluetooth</span>
</span><span class='line'><span class="sd">using PyBluez (with Python 2).</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">bluetooth</span>
</span><span class='line'>
</span><span class='line'><span class="n">serverMACAddress</span> <span class="o">=</span> <span class="s">&#39;00:1f:e1:dd:08:3d&#39;</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">bluetooth</span><span class="o">.</span><span class="n">BluetoothSocket</span><span class="p">(</span><span class="n">bluetooth</span><span class="o">.</span><span class="n">RFCOMM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">serverMACAddress</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">()</span> <span class="c"># Note change to the old (Python 2) raw_input</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">text</span> <span class="o">==</span> <span class="s">&quot;quit&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span>Server (PyBluezServer.py)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">A simple Python script to receive messages from a client over</span>
</span><span class='line'><span class="sd">Bluetooth using PyBluez (with Python 2).</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">bluetooth</span>
</span><span class='line'>
</span><span class='line'><span class="n">hostMACAddress</span> <span class="o">=</span> <span class="s">&#39;00:1f:e1:dd:08:3d&#39;</span> <span class="c"># The MAC address of a Bluetooth adapter on the server. The server might have multiple Bluetooth adapters.</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">backlog</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="mi">1024</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">bluetooth</span><span class="o">.</span><span class="n">BluetoothSocket</span><span class="p">(</span><span class="n">bluetooth</span><span class="o">.</span><span class="n">RFCOMM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">hostMACAddress</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">backlog</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">client</span><span class="p">,</span> <span class="n">clientInfo</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c"># Echo back to client</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>	
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Closing socket&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Conclusion</h2>
<p>
PyBluez is the most effective way of communicating over Bluetooth using Python. Python sockets can now be used for Bluetooth communication (since Python 3.3).&nbsp; For a simple application, the code is almost identical. For some tasks, however, such as device discovery and Bluetooth service advertisements, it does not seem possible to carry them out using Python sockets. Consequently, PyBluez surpassed Python sockets in most regards. <a href="http://stackoverflow.com/questions/10583362/bluetooth-lib-for-python-3/16129705#16129705">This Stackoverflow question</a> discusses some of the limitations of Python sockets for Bluetooth.<br />
</p>
<h2>Further reading</h2>
<p>
There is little to no information on Bluetooth programming with Python sockets. There is plenty of information on PyBluez. The following are some useful resources:<br />
</p>
<dl>
<dt><a href="http://www.amazon.com/gp/product/0521703751/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0521703751&amp;linkCode=as2&amp;tag=kevidoraprog-20">Bluetooth Essentials for Programmers</a><img alt="" border="0" src="http://www.assoc-amazon.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=0521703751" height="1" width="1" /></dt>
<dd>Covers many programming languages and uses PyBluez with Python. Great for getting started <i>fast</i> and gaining understanding along the way.</dd>
<dt><a href="https://github.com/manuelnaranjo/PyBlueZ/tree/master/examples">PyBluez examples</a></dt>
<dd>Example code covering various Bluetooth tasks. </dd>
</dl>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create Dynamic Menus in JSF]]></title>
    <link href="http://kevindoran.github.io/how-to-create-dynamic-menus-in-jsf/"/>
    <updated>2013-02-01T20:59:39+13:00</updated>
    <id>http://kevindoran.github.io/how-to-create-dynamic-menus-in-jsf</id>
    <content type="html"><![CDATA[<p>
    This post presents an effective way to create a dynamic menu in JSF. Code for the menu can be accessed from its <a href='https://code.google.com/p/jsf-menu/downloads/list' target="_blank">Google Code Project</a>.
</p>

<p>
    The menu, with some basic CSS styling is shown below. The menu uses plain JSF (without needing Primefaces). Some extra CSS can be used to make it look pretty.
</p>
<!-- more -->
<img id='jsfMenu' class='img-responsive' src='http://kevindoran.github.io/images/jsfMenu.jpg' alt='Dynamic Menu using JSF' />

<p>
I used random numbers instead of a real example, so try and imaging names such as &#8220;Computer components&#8221;, &#8220;Laptops&#8221; and &#8220;Headphones&#8221; instead of the long numbers.<br />
</p>
<p>
This menu is dynamic: clicking a menu item will cause the menu to be regenerated and the new menu items will be chosen based on the item that was clicked. The most common example of this behaviour is a hierarchical navigation menu, such as a category menu on eBay or Amazon. 
</p>

<h2>How to make the menu</h2>
<p>
The code required to create this menu is as follows:
<figure class='code'><figcaption><span>The XHTML file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span>
</span><span class='line'>      <span class="na">xmlns:h=</span><span class="s">&quot;http://java.sun.com/jsf/html&quot;</span>
</span><span class='line'>      <span class="na">xmlns:mt=</span><span class="s">&quot;http://nz.co.kevindoran/jsf-menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h:head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Menu Table Test<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/h:head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h:body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h:form&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h2&gt;</span>JSF Menu Table Test<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>            Current category: #{randomMenu.currentCategory}
</span><span class='line'>            <span class="nt">&lt;mt:MenuTable</span> <span class="na">model=</span><span class="s">&quot;#{randomMenu.menuTable}&quot;</span> <span class="na">updateID=</span><span class="s">&quot;@form&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/h:form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/h:body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span>MenuBean.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">nz.co.kevindoran.jsfmenutable.MenuTable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">nz.co.kevindoran.jsfmenutable.Subscriber</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ManagedBean</span>
</span><span class='line'><span class="nd">@ViewScoped</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RandomMenu</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MenuTable</span><span class="o">&lt;</span><span class="n">Category</span><span class="o">&gt;</span> <span class="n">menuTable</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">columnCount</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Category</span> <span class="n">currentCategory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Category</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RandomMenu</span><span class="o">()</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">menuTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MenuTable</span><span class="o">&lt;&gt;(</span><span class="n">columnCount</span><span class="o">);</span>
</span><span class='line'>        <span class="n">menuTable</span><span class="o">.</span><span class="na">setContents</span><span class="o">(</span><span class="n">currentCategory</span><span class="o">.</span><span class="na">getChildCategories</span><span class="o">());</span>
</span><span class='line'>        <span class="n">MenuClickListener</span> <span class="n">menuListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MenuClickListener</span><span class="o">();</span>
</span><span class='line'>        <span class="n">menuTable</span><span class="o">.</span><span class="na">addSubscriber</span><span class="o">(</span><span class="n">menuListener</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">MenuClickListener</span> <span class="kd">implements</span> <span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">Category</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Category</span> <span class="n">change</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentCategory</span> <span class="o">=</span> <span class="n">change</span><span class="o">;</span>
</span><span class='line'>            <span class="n">menuTable</span><span class="o">.</span><span class="na">setContents</span><span class="o">(</span><span class="n">currentCategory</span><span class="o">.</span><span class="na">getChildCategories</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MenuTable</span><span class="o">&lt;</span><span class="n">Category</span><span class="o">&gt;</span> <span class="nf">getMenuTable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">menuTable</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Category</span> <span class="nf">getCurrentCategory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">currentCategory</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
    The main point to note here is how the <code>RandomMenu</code> listens for menu click events. Its inner class <code>MenuClickListener</code> implements Subscriber<Category> (you don&#8217;t need to use an inner class, <code>RandomMenu</code> could implement <code>Subscriber&lt;Category&gt;</code>). In other words, it is subscribing to the event of a <code>Category</code> being updated. When the menu is clicked, the <code>MenuTable</code> with call the <code>update(Category change)</code> method, passing it the <code>Category</code> that was clicked. 
</p>
<p>
    The <code>Category</code> class I use simply generates random numbers for each of the menu items. In a more realistic situation, the following class would populate the menu with child categories of the clicked category, or something similar. The simply <code>Category</code> class is as follows:
</p>
<figure class='code'><figcaption><span>Category.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Category</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Category</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Category</span><span class="o">&gt;</span> <span class="nf">getChildCategories</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Category</span><span class="o">&gt;</span> <span class="n">childCategories</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">20</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">childCategories</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Category</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">childCategories</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Back end</h2>
<p>
The above code will work as is if you download the accompanying JAR from the <a href='https://code.google.com/p/jsf-menu/downloads/list' target='_blank'>Google Code project</a>. 
If you are interested it how to make your own menu from scratch, below is the two extra pieces of code you will have to write:
</p>

<figure class='code'><figcaption><span>A Java Back Bean (MenuTable.java)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MenuTable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">rows</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">subscribers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">noOfColumns</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MenuTable</span><span class="o">(</span><span class="kt">int</span> <span class="n">noOfColumns</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">noOfColumns</span> <span class="o">=</span> <span class="n">noOfColumns</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Organised the input objects into rows which are as even as possible </span>
</span><span class='line'><span class="cm">     * (so that there isn&#39;t one huge row and other tiny rows).</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setContents</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">rows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">objects</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">maxColumnLength</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(((</span><span class="kt">double</span><span class="o">)</span><span class="n">count</span><span class="o">)</span> <span class="o">/</span> <span class="n">noOfColumns</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">maxColumnLength</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">rows</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Row</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">objects</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">noOfColumns</span><span class="o">;</span> <span class="n">col</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">left</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="n">col</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">left</span> <span class="o">/</span> <span class="n">noOfColumns</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">columnLength</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
</span><span class='line'>            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">columnLength</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>                <span class="n">rows</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSelected</span><span class="o">(</span><span class="n">T</span> <span class="n">selected</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">updateSubscribers</span><span class="o">(</span><span class="n">selected</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateSubscribers</span><span class="o">(</span><span class="n">T</span> <span class="n">latest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">:</span> <span class="n">subscribers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">s</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">latest</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Row</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="nf">getRows</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">rows</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNoOfColumns</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">noOfColumns</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubscriber</span><span class="o">(</span><span class="n">Subscriber</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">subscribers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">subscriber</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Row</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">contents</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">getContents</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">contents</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">contents</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span>JSF Composite Component (MenuTable.xhtml)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span>
</span><span class='line'>      <span class="na">xmlns:cc=</span><span class="s">&quot;http://java.sun.com/jsf/composite&quot;</span>
</span><span class='line'>      <span class="na">xmlns:ui=</span><span class="s">&quot;http://java.sun.com/jsf/facelets&quot;</span>
</span><span class='line'>      <span class="na">xmlns:f=</span><span class="s">&quot;http://java.sun.com/jsf/core&quot;</span>
</span><span class='line'>      <span class="na">xmlns:h=</span><span class="s">&quot;http://java.sun.com/jsf/html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;cc:interface&gt;</span>
</span><span class='line'>        <span class="nt">&lt;cc:attribute</span> <span class="na">name=</span><span class="s">&quot;model&quot;</span> <span class="na">type=</span><span class="s">&quot;nz.co.kevindoran.jsfmenutable.MenuTable&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;cc:attribute</span> <span class="na">name=</span><span class="s">&quot;updateID&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/cc:interface&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;cc:implementation&gt;</span>
</span><span class='line'>        <span class="nt">&lt;table&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ui:repeat</span> <span class="na">id=</span><span class="s">&quot;repeat1&quot;</span> <span class="na">value=</span><span class="s">&quot;#{cc.attrs.model.rows}&quot;</span> <span class="na">var=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;ui:repeat</span> <span class="na">id=</span><span class="s">&quot;repeat2&quot;</span> <span class="na">value=</span><span class="s">&quot;#{row.contents}&quot;</span> <span class="na">var=</span><span class="s">&quot;entry&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;td&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;h:commandLink</span> <span class="na">actionListener=</span><span class="s">&quot;#{cc.attrs.model.setSelected(entry)}&quot;</span> <span class="na">value=</span><span class="s">&quot;#{entry.toString()}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;f:ajax</span> <span class="na">render=</span><span class="s">&quot;#{cc.attrs.updateID}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/h:commandLink&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/ui:repeat&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ui:repeat&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/cc:implementation&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Accessing the code</h2>
<p>
The code to create the menu is hosted on a <a href="http://code.google.com/p/jsf-menu/" target="_blank">Google Code project</a>. There is also a <a href="http://code.google.com/p/jsf-menu/downloads/list" target="_blank">convenient JAR</a> that can be downloaded. There are three ways to use the project:
</p>
<ol class='detailed-list'>
<li>Download the JAR from the <a href="http://code.google.com/p/jsf-menu/downloads/list" target="_blank">downloads list</a>, and include it on your classpath.</li>
<li>Obtain the source code by cloning <a href="http://code.google.com/p/jsf-menu/source/checkout" target="_blank">the Mercurial repository</a>. </li>
<li>The project is a Maven project, so you can install it in your local Maven repository (run: mvn install) and then add it as a dependency like so:</li>
</ol>

<figure class='code'><figcaption><span>Maven Pom Segment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>nz.co.kevindoran<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>google-charts-jsf<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>jar<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
If you have obtained the Maven project, you can change the packaging element: <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code> to <code>&lt;packaging&gt;war&lt;/packaging&gt;</code>. Deploying the resulting WAR file will run he examples show above.
</p>
<h3>Some useful resources</h3>
<p>
There are a number of books on JSF and Primefaces that I have found useful when working on this topic:
</p>
<ul>
<li><a href="http://www.amazon.com/gp/product/1849519285/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1849519285&amp;linkCode=as2&amp;tag=kevidoraprog-20">PrimeFaces Cookbook</a><img alt="" border="0" src="http://www.assoc-amazon.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=1849519285" height="1" style="border: none !important; margin: 0px !important;" width="1" /></li>
<li>
<a href="http://www.amazon.com/gp/product/1849519900/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1849519900&amp;linkCode=as2&amp;tag=kevidoraprog-20">Instant PrimeFaces Starter</a><img alt="" border="0" src="http://ir-na.amazon-adsystem.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=1849519900" height="1" style="border: none !important; margin: 0px !important;" width="1" />
</li>
<li><a href="http://www.amazon.com/gp/product/0137012896/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0137012896&amp;linkCode=as2&amp;tag=kevidoraprog-20">Core JavaServer Faces (3rd Edition)</a><img alt="" border="0" src="http://www.assoc-amazon.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=0137012896" height="1" style="border: none !important; margin: 0px !important;" width="1" />
</li>
<li><a href="http://www.amazon.com/gp/product/1849512701/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1849512701&amp;linkCode=as2&amp;tag=kevidoraprog-20">Java EE 6 Development with NetBeans 7</a><img alt="" border="0" src="http://www.assoc-amazon.com/e/ir?t=kevidoraprog-20&amp;l=as2&amp;o=1&amp;a=1849512701" height="1" style="border: none !important; margin: 0px !important;" width="1" /></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Which Helps You Choose a Movie to Watch When You Have Too Many]]></title>
    <link href="http://kevindoran.github.io/app-which-helps-you-choose-a-movie-to-watch-when-you-have-too-many/"/>
    <updated>2012-04-15T14:21:14+12:00</updated>
    <id>http://kevindoran.github.io/app-which-helps-you-choose-a-movie-to-watch-when-you-have-too-many</id>
    <content type="html"><![CDATA[<p>
When I want to watch a movie, I have far too many to choose from on my computer and home network. It takes me a long time to sift through them all to find a really good one. The process is:
</p>
<!-- more -->
<ol>
<li>Open movie folder.</li>
<li>Pick a random letter A-Z to narrow down the selection. Only movies beginning with this letter will be investigated.</li>
<li>For each movie, copy its name and find its rating in IMDB.</li>
<li>If its rating is above 8, its worth watching (-1 for movies with time-shifting, as they seem to always be over-rated on IMDB).</li>
<li>After a while, if there are more than one movie with a &gt; 8 rating, choose the highest, or the one in a genre that I am particularly eager for.</li>
</ol>
<p>
This usually takes around 15 minutes. If there are many people watching the movie with me, the process is considerably slower, as everyone has different tastes and has seen different subsets of the movie universe.
</p>
<p>
    To solve this problem I made an application which helps automates this process.
</p>


<h2>Movie rating robot</h2>
<p>
    The application retrieves the <a href="http://www.rottentomatoes.com/" target="_blank">Rotten Tomato</a> rating for every movie in a chosen folder on your computer or network. All movies are then ordered by rating, helping you pick out the best.
</p>
<p>
Here is a demo (best viewed in HD):
</p>
<iframe allowfullscreen="" frameborder="0" height="360" src="http://www.youtube.com/embed/X_qE3DPW1dE" width="640"></iframe>

<h2>Download</h3>
<p>
The program can be downloaded from Google Code <a href="http://code.google.com/p/movie-rater/downloads/list" target="_blank">project page</a>.
</p>
<p>
To run, just double click the downloaded file. It works on windows and linux and requires Java 7. 
</p>
<p>
    You can access the code on the <a href="http://code.google.com/p/movie-rater/downloads/list" target="_blank">project page</a> too. 
</p>

]]></content>
  </entry>
  
</feed>
